
services:
  telemetry-api:
    build: .
    container_name: telemetry-api
    environment:
      PORT: "8080"           # app listens on 8080 in the container
      PYTHONUNBUFFERED: "1"
      API_KEY: "${API_KEY:-TEST_ADMIN_KEY}"  # <-- add this
    ports:
      - "127.0.0.1:8080:8080"  # tests hit localhost:8080
      - "127.0.0.1:80:8080"    # some tests/fixtures still use port 80
    healthcheck:
      # Keep it dead simple: no curl, no heredocs — just a Python one-liner.
      test: ["CMD-SHELL", "python -c 'import socket,sys; s=socket.socket(); s.settimeout(1); s.connect((\"127.0.0.1\", 8080)); s.close(); sys.exit(0)'"]
      interval: 2s
      timeout: 1s
      retries: 90
      start_period: 10s
    networks:
      default:
        aliases:
          - api   # keep old hostname working

  # keep disabled until UDP ingest exists in backend
  udp-ingestor:
    build: ./services/udp-head
    image: ghcr.io/netreex/telemetry-api-udp:0.8.10
    container_name: telemetry-udp-ingestor
    environment:
      - UDP_BIND=0.0.0.0
      - UDP_PORT=2055
      - ALLOWLIST_CIDRS=
      - RATE_PER_MIN=60000
      - API_URL=http://api:80/v1/ingest/netflow
      - API_KEY=${API_KEY}
      - SOURCE_ID=udp-head-01
    ports:
      - "2055:2055/udp"
    depends_on:
      telemetry-api:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 0

  udp-head:
    build:
      context: ./heads
      dockerfile: Dockerfile.udp
    image: ghcr.io/netreex/telemetry-api-udp:0.0.1
    container_name: telemetry-udp-head
    profiles: ["udp"]          # <— only runs when profile enabled
    ports:
      - "2055:2055/udp"
      - "8081:8081"
    restart: unless-stopped
    depends_on:
      telemetry-api:
        condition: service_healthy

volumes:
  dbdata:
