name: scenario-tests
on:
  push: { branches: [ main ] }
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Start e2e stack
        env:
          TELEMETRY_DLQ_DIR: /tmp/dlq
        run: |
          docker compose down || true
          # Load test environment variables (skip comments)
          export $(grep -v '^#' .github/test.env | xargs)
          echo "Loaded env vars: TELEMETRY_SEED_KEYS=$TELEMETRY_SEED_KEYS"
          docker compose up -d --build
          echo "Waiting for API to become healthy (up to 80s)..."
          ok=0
          for i in $(seq 1 40); do
            if docker exec telemetry-api python -c "import urllib.request, sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:80/v1/health').status == 200 else 1)" 2>/dev/null
            then
              echo "API healthy"
              ok=1
              break
            fi
            sleep 2
          done
          [ "$ok" = "1" ] || { docker compose ps; docker compose logs --no-color | tail -n 300; exit 1; }

      # Run ALL tests inside the container to share the same DB/migrations
      - name: Run tests inside container
        run: |
          docker exec telemetry-api bash -lc '
            set -e
            cd /app
            # Hard guarantee api_keys exists and is seeded (uses the same engine as app)
            python -c "from app.db_init import init_schema_and_seed_if_needed; init_schema_and_seed_if_needed(); print(\"db ok\")"
            PYTHONPATH=/app pytest -q
          '

      - name: Scenario tester
        env:
          API_BASE_URL: http://localhost:80
          API_KEY: TEST_ADMIN_KEY
        run: |
          python tools/scenario_tester.py | tee scenario_report.json
          echo "---- Summary ----"
          jq '.results[] | {scenario, status, ok}' scenario_report.json

      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose ps
          docker compose logs --no-color | tail -n 500
          echo "=== Database contents ==="
          docker exec telemetry-api sqlite3 /app/telemetry.db "SELECT key_id, scopes, disabled FROM api_keys;"

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: scenario-report
          path: scenario_report.json


