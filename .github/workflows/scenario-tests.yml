name: scenario-tests
on:
  push:
    branches: [ main, 'fix/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      API_KEY: TEST_ADMIN_KEY
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build image (no cache)
        run: docker build --pull --no-cache -t telemetry-api:build .

      - name: Start stack and wait for container health
        run: |
          set -euo pipefail
          docker compose -f docker-compose.yml up -d --build --wait
          docker ps --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}'
          echo "API_BASE=http://127.0.0.1:8080" >> "$GITHUB_ENV"
          echo "HEALTH_PATH=/v1/health" >> "$GITHUB_ENV"

      - name: HTTP smoke check
        run: |
          set -euo pipefail
          for i in $(seq 1 60); do
            code=$(curl -sS --connect-timeout 1 --max-time 2 -o /dev/null -w '%{http_code}' "${API_BASE}${HEALTH_PATH}" || true)
            echo "try $i -> $code"
            [ "$code" = "200" ] && exit 0
            sleep 1
          done
          echo "Health never reached 200"; exit 1
          
          # sanity debug
          docker compose ps
          curl -i --max-time 2 "${API_BASE}${HEALTH_PATH}" || true

      - name: Sanity check container
        run: |
          docker exec telemetry-api python -c "import sqlite3; print('sqlite3 OK')"
          docker exec telemetry-api python -c "from app.main import app; print('app OK')"
          # Verify we're using the locally built image
          docker exec telemetry-api ls -la /app/app/api/
          docker exec telemetry-api python -c "import app.api; print('app.api package OK')"

      - name: DB check (verify scopes format)
        run: |
          docker exec telemetry-api bash -lc 'python - <<"PY"
          from sqlalchemy import create_engine, text
          import os, json, time
          db=os.getenv("DB_URL","sqlite:////data/telemetry.db")
          e=create_engine(db, future=True)
          
          # Wait for api_keys table to exist
          max_retries = 10
          for attempt in range(max_retries):
              try:
                  with e.connect() as c:
                      # First check what tables exist
                      tables = c.execute(text("SELECT name FROM sqlite_master WHERE type=:type"), {"type": "table"}).all()
                      print(f"Available tables: {[t[0] for t in tables]}")
                      
                      rows=c.execute(text("select key_id, scopes from api_keys limit 3;")).all()
                      print("DB scopes check:")
                      for row in rows:
                          print(f"  {row[0]}: {row[1]}")
                      break
              except Exception as exc:
                  if attempt < max_retries - 1:
                      print(f"Waiting for api_keys table (attempt {attempt + 1}/{max_retries})...")
                      time.sleep(2)
                  else:
                      print(f"Failed to find api_keys table after {max_retries} attempts")
                      raise
          PY'

      # Run tests against the running container
      - name: Run tests against container
        env:
          API_BASE_URL: http://localhost:8080
          API_KEY: TEST_ADMIN_KEY
        run: |
          # Wait for API to be ready
          for i in $(seq 1 60); do
            curl -sf "${API_BASE_URL}/v1/health" && break || sleep 1
          done
          # Run tests using HTTP-only approach
          python -m pytest tests/ -v

      - name: Scenario tester
        env:
          API_BASE_URL: http://localhost:8080
          API_KEY: TEST_ADMIN_KEY
        run: |
          python tools/scenario_tester.py | tee scenario_report.json
          echo "---- Summary ----"
          jq '.results[] | {scenario, status, ok}' scenario_report.json

      - name: Show logs on failure
        if: failure()
        run: |
          docker ps -a
          docker logs --tail=200 telemetry-api || true
          curl -v -H "x-api-key: TEST_ADMIN_KEY" http://localhost:8080/health || true

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: scenario-report
          path: scenario_report.json


