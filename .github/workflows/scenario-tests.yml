name: scenario-tests
on:
  push:
    branches: [ main, 'fix/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Pull golden image
        run: docker pull shvin/telemetry-api:$(cat VERSION)-golden

      - name: Start e2e stack
        env:
          TELEMETRY_DLQ_DIR: /tmp/dlq
        run: |
          docker compose down || true
          # Load test environment variables (skip comments)
          export $(grep -v '^#' .github/test.env | xargs)
          echo "Loaded env vars: TELEMETRY_SEED_KEYS=$TELEMETRY_SEED_KEYS"
          # Use the golden image
          docker run -d --rm --name telemetry-api -p 80:80 \
            -e TELEMETRY_SEED_KEYS="$TELEMETRY_SEED_KEYS" \
            -e DEMO_BASE_URL="http://localhost" \
            -e FEATURE_SOURCES=1 \
            -e FEATURE_UDP_HEAD=0 \
            shvin/telemetry-api:$(cat VERSION)-golden
          echo "Waiting for API to become healthy (up to 80s)..."
          ok=0
          for i in $(seq 1 40); do
            if docker exec telemetry-api python -c "import urllib.request, sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:80/v1/health').status == 200 else 1)" 2>/dev/null
            then
              echo "API healthy"
              ok=1
              break
            fi
            sleep 2
          done
          [ "$ok" = "1" ] || { docker ps; docker logs telemetry-api --tail 300; exit 1; }

      - name: Sanity check container
        run: |
          docker exec telemetry-api python -c "import sqlite3; print('sqlite3 OK')"
          docker exec telemetry-api python -c "from app.main import app; print('app OK')"

      - name: DB check (verify scopes format)
        run: |
          docker exec telemetry-api bash -lc 'python - <<"PY"
          from sqlalchemy import create_engine, text
          import os, json
          db=os.getenv("DB_URL","sqlite:////app/telemetry.db")
          e=create_engine(db, future=True)
          with e.connect() as c:
              rows=c.execute(text("select key_id, scopes from api_keys limit 3;")).all()
              print("DB scopes check:")
              for row in rows:
                  print(f"  {row[0]}: {row[1]}")
          PY'

      # Run tests against the running container
      - name: Run tests against container
        run: |
          # Wait for container to be ready
          sleep 5
          # Run tests using the test client
          python -m pytest tests/ -v

      - name: Scenario tester
        env:
          API_BASE_URL: http://localhost:80
          API_KEY: TEST_ADMIN_KEY
        run: |
          python tools/scenario_tester.py | tee scenario_report.json
          echo "---- Summary ----"
          jq '.results[] | {scenario, status, ok}' scenario_report.json

      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose ps
          docker compose logs --no-color | tail -n 500
          echo "=== Database contents ==="
          docker exec telemetry-api bash -lc 'python - <<"PY"
          from sqlalchemy import create_engine, text
          import os
          db=os.getenv("DB_URL","sqlite:////app/telemetry.db")
          e=create_engine(db, future=True)
          with e.connect() as c:
              rows=c.execute(text("SELECT key_id, scopes, disabled FROM api_keys;")).all()
              for row in rows:
                  print(f"  {row[0]}: {row[1]} (disabled={row[2]})")
          PY'

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: scenario-report
          path: scenario_report.json


