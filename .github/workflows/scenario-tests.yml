name: scenario-tests
on:
  push:
    branches: [ main, 'fix/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    env:
      API_KEY: TEST_ADMIN_KEY
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Build image (no cache)
        run: docker build --pull --no-cache -t telemetry-api:build .

      - name: Start stack
        run: |
          docker compose -f docker-compose.yml up -d --build telemetry-api
          docker ps -a
          docker compose ps

      - name: Diagnostics (ports & logs)
        run: |
          echo "==== docker ps (ports) ===="
          docker ps --format 'table {{.Names}}\t{{.Ports}}'
          echo "==== ss -ltn on host ===="
          ss -ltn || true
          echo "==== last 200 lines of API logs ===="
          docker logs --tail=200 telemetry-api || true

      - name: Discover health endpoint
        env:
          API_KEY: TEST_ADMIN_KEY
          PORT: 8080
        run: |
          set -euo pipefail
          API="${API:-http://127.0.0.1:${PORT:-8080}}"
          echo "Probing base URL: $API"
          CANDIDATES=(/api/health /api/healthz /health /healthz /v1/health /v1/healthz /readyz /livez /ready /live /)
          found=""

          # First, quick socket check to fail fast if port closed
          if ! (command -v nc >/dev/null 2>&1); then sudo apt-get update && sudo apt-get install -y netcat-openbsd; fi
          for i in {1..60}; do
            if nc -z 127.0.0.1 "${PORT:-8080}"; then
              echo "Host port ${PORT:-8080} is open."
              break
            fi
            echo "Waiting for host port ${PORT:-8080} to open... ($i/60)"
            sleep 1
          done

          # Probe candidates from the host
          for p in "${CANDIDATES[@]}"; do
            code=$(curl -s -o /dev/null -w '%{http_code}' -H "x-api-key: ${API_KEY}" "$API$p" || true)
            echo "$p -> $code"
            if [ "$code" = "200" ]; then
              echo "HEALTH_PATH=$p" >> "$GITHUB_ENV"
              found="$p"
              break
            fi
          done

          # Fallback: probe from inside the container (in case ports aren't mapped)
          if [ -z "$found" ]; then
            echo "Trying in-container probe at 127.0.0.1:\${PORT}"
            for p in "${CANDIDATES[@]}"; do
              code=$(docker exec telemetry-api sh -lc 'apk add --no-cache curl >/dev/null 2>&1 || true; curl -s -o /dev/null -w "%{http_code}" -H "x-api-key: '"${API_KEY}"'" http://127.0.0.1:${PORT:-8080}'"$p"' || true')
              echo "[in-container] $p -> $code"
              if [ "$code" = "200" ]; then
                echo "HEALTH_PATH=$p" >> "$GITHUB_ENV"
                found="$p"
                break
              fi
            done
          fi

          if [ -z "$found" ]; then
            echo "==== docker ps (ports) ===="
            docker ps --format 'table {{.Names}}\t{{.Ports}}'
            echo "==== API logs tail ===="
            docker logs --tail=200 telemetry-api || true
            echo "Error: Could not find a working health endpoint"
            exit 1
          fi

          echo "Discovered health path: $found"

      - name: Wait for API to be healthy
        env:
          API_KEY: TEST_ADMIN_KEY
          PORT: 8080
        run: |
          set -euo pipefail
          API="${API:-http://127.0.0.1:${PORT:-8080}}"
          : "${HEALTH_PATH:?HEALTH_PATH not set}"
          for i in {1..120}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' -H "x-api-key: ${API_KEY}" "$API$HEALTH_PATH" || true)
            if [ "$code" = "200" ]; then
              echo "API is healthy at $API$HEALTH_PATH"
              exit 0
            fi
            sleep 1
          done

          echo "API never became healthy (last status: $code)"
          docker logs --tail=300 telemetry-api || true
          exit 1

      - name: Sanity check container
        run: |
          docker exec telemetry-api python -c "import sqlite3; print('sqlite3 OK')"
          docker exec telemetry-api python -c "from app.main import app; print('app OK')"
          # Verify we're using the locally built image
          docker exec telemetry-api ls -la /app/app/api/
          docker exec telemetry-api python -c "import app.api; print('app.api package OK')"

      - name: DB check (verify scopes format)
        run: |
          docker exec telemetry-api bash -lc 'python - <<"PY"
          from sqlalchemy import create_engine, text
          import os, json, time
          db=os.getenv("DB_URL","sqlite:////data/telemetry.db")
          e=create_engine(db, future=True)
          
          # Wait for api_keys table to exist
          max_retries = 10
          for attempt in range(max_retries):
              try:
                  with e.connect() as c:
                      # First check what tables exist
                      tables = c.execute(text("SELECT name FROM sqlite_master WHERE type=:type"), {"type": "table"}).all()
                      print(f"Available tables: {[t[0] for t in tables]}")
                      
                      rows=c.execute(text("select key_id, scopes from api_keys limit 3;")).all()
                      print("DB scopes check:")
                      for row in rows:
                          print(f"  {row[0]}: {row[1]}")
                      break
              except Exception as exc:
                  if attempt < max_retries - 1:
                      print(f"Waiting for api_keys table (attempt {attempt + 1}/{max_retries})...")
                      time.sleep(2)
                  else:
                      print(f"Failed to find api_keys table after {max_retries} attempts")
                      raise
          PY'

      # Run tests against the running container
      - name: Run tests against container
        env:
          API_BASE_URL: http://localhost:8080
          API_KEY: TEST_ADMIN_KEY
        run: |
          # Wait for API to be ready
          for i in $(seq 1 60); do
            curl -sf "${API_BASE_URL}/v1/health" && break || sleep 1
          done
          # Run tests using HTTP-only approach
          python -m pytest tests/ -v

      - name: Scenario tester
        env:
          API_BASE_URL: http://localhost:8080
          API_KEY: TEST_ADMIN_KEY
        run: |
          python tools/scenario_tester.py | tee scenario_report.json
          echo "---- Summary ----"
          jq '.results[] | {scenario, status, ok}' scenario_report.json

      - name: Show logs on failure
        if: failure()
        run: |
          docker ps -a
          docker logs --tail=200 telemetry-api || true
          curl -v -H "x-api-key: TEST_ADMIN_KEY" http://localhost:8080/health || true

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: scenario-report
          path: scenario_report.json


