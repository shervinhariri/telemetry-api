name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE: shvin/telemetry-api
  VERSION: ${{ github.ref_name }}
  GOLDEN_TAG: ${{ github.ref_name }}-golden

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_DIGEST: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure VERSION file exists
        run: |
          test -f VERSION || { echo "VERSION file missing at repo root"; exit 1; }
          echo "VERSION file found: $(cat VERSION)"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push (multi-arch)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=$(cat VERSION)
          tags: |
            ${{ env.IMAGE }}:${{ env.VERSION }}
            ${{ env.IMAGE }}:${{ env.GOLDEN_TAG }}
            ${{ env.IMAGE }}:latest
          provenance: false

      - name: Show digest
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  e2e:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Pull exact image by digest
        run: docker pull ${{ env.IMAGE }}@${{ needs.build-and-push.outputs.IMAGE_DIGEST }}

      - name: Pull golden image
        run: docker pull ${{ env.IMAGE }}:${{ env.GOLDEN_TAG }}

      - name: Run container
        run: |
          docker run -d --rm --name telemetry-api -p 80:80 \
            -e TELEMETRY_SEED_KEYS="TEST_ADMIN_KEY,DEV_ADMIN_KEY_5a8f9ffdc3" \
            ${{ env.IMAGE }}:${{ env.GOLDEN_TAG }}

      - name: Wait for health
        run: |
          for i in $(seq 1 30); do curl -sf http://localhost/v1/health && break; sleep 2; done

      - name: Smoke - health
        run: curl -sf http://localhost/v1/health

      - name: Smoke - version
        run: |
          expected="$(cat VERSION)"
          v=$(curl -sf http://localhost/v1/version | jq -r '.version')
          test "$v" = "$expected" || (echo "Expected $expected, got '$v'"; exit 1)

      - name: Smoke - metrics
        run: |
          curl -sf -H "Authorization: Bearer DEV_ADMIN_KEY_5a8f9ffdc3" http://localhost/v1/metrics | head

      - name: Stop container
        if: always()
        run: docker rm -f telemetry-api || true

  create-release:
    needs: [build-and-push, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Echo digest from build job
        run: |
          echo "Using image digest: ${{ needs.build-and-push.outputs.IMAGE_DIGEST }}"

      # OPTIONAL: keep a disabled wait loop (for manual toggling if ever needed)
      - name: (Optional) Wait for Docker Hub propagation
        if: ${{ false }}
        run: |
          IMAGE="${{ env.IMAGE }}"
          TAG="${{ env.GOLDEN_TAG }}"
          MAX=120
          i=0
          echo "Waiting up to $MAX attempts for $IMAGE:$TAG to appear..."
          while [ $i -lt $MAX ]; do
            if docker manifest inspect "$IMAGE:$TAG" >/dev/null 2>&1; then
              echo "Found $IMAGE:$TAG"
              exit 0
            fi
            i=$((i+1))
            echo "Not yet... ($i/$MAX)"; sleep 15
          done
          echo "Timeout waiting for $IMAGE:$TAG"
          exit 1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
